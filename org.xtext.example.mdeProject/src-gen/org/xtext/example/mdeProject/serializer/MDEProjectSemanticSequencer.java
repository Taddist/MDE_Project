/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mdeProject.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mDE_Project.Add;
import mDE_Project.Delete;
import mDE_Project.Eattribute;
import mDE_Project.Eclass;
import mDE_Project.Load;
import mDE_Project.MDE_ProjectPackage;
import mDE_Project.Modify;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mdeProject.services.MDEProjectGrammarAccess;

@SuppressWarnings("all")
public class MDEProjectSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MDEProjectGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MDE_ProjectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MDE_ProjectPackage.ADD:
				sequence_Add(context, (Add) semanticObject); 
				return; 
			case MDE_ProjectPackage.DELETE:
				sequence_Delete(context, (Delete) semanticObject); 
				return; 
			case MDE_ProjectPackage.EATTRIBUTE:
				sequence_Eattribute(context, (Eattribute) semanticObject); 
				return; 
			case MDE_ProjectPackage.ECLASS:
				sequence_Eclass(context, (Eclass) semanticObject); 
				return; 
			case MDE_ProjectPackage.LOAD:
				sequence_Load(context, (Load) semanticObject); 
				return; 
			case MDE_ProjectPackage.MODIFY:
				sequence_Modify(context, (Modify) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     QueryExpression returns Add
	 *     Add returns Add
	 *
	 * Constraint:
	 *     specification=Keyword
	 */
	protected void sequence_Add(ISerializationContext context, Add semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MDE_ProjectPackage.Literals.QUERY_EXPRESSION__SPECIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDE_ProjectPackage.Literals.QUERY_EXPRESSION__SPECIFICATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddAccess().getSpecificationKeywordParserRuleCall_1_0(), semanticObject.getSpecification());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QueryExpression returns Delete
	 *     Delete returns Delete
	 *
	 * Constraint:
	 *     specification=Keyword
	 */
	protected void sequence_Delete(ISerializationContext context, Delete semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MDE_ProjectPackage.Literals.QUERY_EXPRESSION__SPECIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDE_ProjectPackage.Literals.QUERY_EXPRESSION__SPECIFICATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteAccess().getSpecificationKeywordParserRuleCall_1_0(), semanticObject.getSpecification());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Keyword returns Eattribute
	 *     Eattribute returns Eattribute
	 *
	 * Constraint:
	 *     (name=EString from=EString? type=EString?)
	 */
	protected void sequence_Eattribute(ISerializationContext context, Eattribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Keyword returns Eclass
	 *     Eclass returns Eclass
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         type=EString? 
	 *         relatedTo=EString? 
	 *         boundEclass=EString? 
	 *         boundRelatedTo=EString? 
	 *         typeRelation=EString? 
	 *         (columns+=Eattribute columns+=Eattribute*)?
	 *     )
	 */
	protected void sequence_Eclass(ISerializationContext context, Eclass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Load returns Load
	 *
	 * Constraint:
	 *     (name=EString actions+=QueryExpression actions+=QueryExpression*)
	 */
	protected void sequence_Load(ISerializationContext context, Load semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryExpression returns Modify
	 *     Modify returns Modify
	 *
	 * Constraint:
	 *     (specification=Keyword newValueName=EString? newValueType=EString?)
	 */
	protected void sequence_Modify(ISerializationContext context, Modify semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
