/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mdeProject.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mdeProject.ide.contentassist.antlr.internal.InternalMDEProjectParser;
import org.xtext.example.mdeProject.services.MDEProjectGrammarAccess;

public class MDEProjectParser extends AbstractContentAssistParser {

	@Inject
	private MDEProjectGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMDEProjectParser createParser() {
		InternalMDEProjectParser result = new InternalMDEProjectParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQueryExpressionAccess().getAlternatives(), "rule__QueryExpression__Alternatives");
					put(grammarAccess.getKeywordAccess().getAlternatives(), "rule__Keyword__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
					put(grammarAccess.getLoadAccess().getGroup_5(), "rule__Load__Group_5__0");
					put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
					put(grammarAccess.getDeleteAccess().getGroup(), "rule__Delete__Group__0");
					put(grammarAccess.getModifyAccess().getGroup(), "rule__Modify__Group__0");
					put(grammarAccess.getModifyAccess().getGroup_2(), "rule__Modify__Group_2__0");
					put(grammarAccess.getModifyAccess().getGroup_3(), "rule__Modify__Group_3__0");
					put(grammarAccess.getEclassAccess().getGroup(), "rule__Eclass__Group__0");
					put(grammarAccess.getEclassAccess().getGroup_3(), "rule__Eclass__Group_3__0");
					put(grammarAccess.getEclassAccess().getGroup_4(), "rule__Eclass__Group_4__0");
					put(grammarAccess.getEclassAccess().getGroup_4_1(), "rule__Eclass__Group_4_1__0");
					put(grammarAccess.getEclassAccess().getGroup_4_2(), "rule__Eclass__Group_4_2__0");
					put(grammarAccess.getEclassAccess().getGroup_4_3(), "rule__Eclass__Group_4_3__0");
					put(grammarAccess.getEclassAccess().getGroup_4_4(), "rule__Eclass__Group_4_4__0");
					put(grammarAccess.getEclassAccess().getGroup_5(), "rule__Eclass__Group_5__0");
					put(grammarAccess.getEclassAccess().getGroup_5_2(), "rule__Eclass__Group_5_2__0");
					put(grammarAccess.getEattributeAccess().getGroup(), "rule__Eattribute__Group__0");
					put(grammarAccess.getEattributeAccess().getGroup_3(), "rule__Eattribute__Group_3__0");
					put(grammarAccess.getEattributeAccess().getGroup_4(), "rule__Eattribute__Group_4__0");
					put(grammarAccess.getLoadAccess().getNameAssignment_1(), "rule__Load__NameAssignment_1");
					put(grammarAccess.getLoadAccess().getActionsAssignment_4(), "rule__Load__ActionsAssignment_4");
					put(grammarAccess.getLoadAccess().getActionsAssignment_5_1(), "rule__Load__ActionsAssignment_5_1");
					put(grammarAccess.getAddAccess().getSpecificationAssignment_1(), "rule__Add__SpecificationAssignment_1");
					put(grammarAccess.getDeleteAccess().getSpecificationAssignment_1(), "rule__Delete__SpecificationAssignment_1");
					put(grammarAccess.getModifyAccess().getSpecificationAssignment_1(), "rule__Modify__SpecificationAssignment_1");
					put(grammarAccess.getModifyAccess().getNewValueNameAssignment_2_1(), "rule__Modify__NewValueNameAssignment_2_1");
					put(grammarAccess.getModifyAccess().getNewValueTypeAssignment_3_1(), "rule__Modify__NewValueTypeAssignment_3_1");
					put(grammarAccess.getEclassAccess().getNameAssignment_2(), "rule__Eclass__NameAssignment_2");
					put(grammarAccess.getEclassAccess().getTypeAssignment_3_1(), "rule__Eclass__TypeAssignment_3_1");
					put(grammarAccess.getEclassAccess().getRelatedToAssignment_4_1_1(), "rule__Eclass__RelatedToAssignment_4_1_1");
					put(grammarAccess.getEclassAccess().getBoundEclassAssignment_4_2_1(), "rule__Eclass__BoundEclassAssignment_4_2_1");
					put(grammarAccess.getEclassAccess().getBoundRelatedToAssignment_4_3_1(), "rule__Eclass__BoundRelatedToAssignment_4_3_1");
					put(grammarAccess.getEclassAccess().getTypeRelationAssignment_4_4_1(), "rule__Eclass__TypeRelationAssignment_4_4_1");
					put(grammarAccess.getEclassAccess().getColumnsAssignment_5_1(), "rule__Eclass__ColumnsAssignment_5_1");
					put(grammarAccess.getEclassAccess().getColumnsAssignment_5_2_1(), "rule__Eclass__ColumnsAssignment_5_2_1");
					put(grammarAccess.getEattributeAccess().getNameAssignment_2(), "rule__Eattribute__NameAssignment_2");
					put(grammarAccess.getEattributeAccess().getFromAssignment_3_1(), "rule__Eattribute__FromAssignment_3_1");
					put(grammarAccess.getEattributeAccess().getTypeAssignment_4_1(), "rule__Eattribute__TypeAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MDEProjectGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MDEProjectGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
